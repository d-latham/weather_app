@using WeatherApp.Models;
@using WeatherApp.Clients;
@using System.Web;
@using WeatherApp.Shared;
@using WeatherApp.Shared.Components;
@using System.Collections.Generic; 
@using WeatherApp.Pages;
@using Microsoft.AspNetCore.Components.Forms;


@inject WeatherClient WeatherClient;
@inject IJSRuntime JSRuntime;


@page "/"

<PageTitle>Index</PageTitle> 
<!-- Show initial popup to get location -->
@if (!@isLocation) {
    <div class="index-weather">
        <EditForm Model="@locationModel" OnSubmit="@selectLocation"> 
            <h1 class="index-header">Weather Forecast</h1>
            <br/>
            <p style="text-align: center;">Enter Location</p>
            <div  class="text-center">
                <input class="location-input" @bind="newLocation"/>
            </div>
            <br/>
            <div class="col text-center" >
                <button type="button" class="btn btn-info" @onclick="selectLocation" >Show me the weather!</button>
            </div>
        </EditForm>
    </div>
} else {
    <div class="index-container">
        <ForecastHeader city="@city" state="@state" onClick="changeLocation"/>
        <!-- Conditions -->
        <DailyForecast forecast="@forecast" dateTime="@dateTime" current="@current"/>
        <br/>
        <!-- Alerts -->

        @if (alerts != null && alerts.alert.Count != 0) {
            <h2 style="margin: 0px 10px 0px 10px;">Alerts in your area:</h2>
            @foreach (WeatherResponse.Alert alert in alerts.alert) {
                <br/>
                <div class="alert-container">
                    <details style="cursor: pointer;">       
                        <summary style="list-style: none;font-family:Comic Sans MS; padding-right: 20px;">
                            <p>@alert.headline</p>
                            @if(alert.areas != "") {
                                <p>Effected Areas: @alert.areas<br/></p>
                            }
                            <p>Effective Dates: @alert.effective.ToString("MM/dd/yyyy") - @alert.expires.ToString("MM/dd/yyyy")</p>
                        </summary>
                        <p>@alert.desc</p>
                        <p>@alert.instruction</p>
                    </details>
                </div> 
            }
        }
    </div>
}

@code {
    private WeatherResponse? weatherResponse = null;
    private WeatherResponse? response = null;
    private string? city;
    private string? state;
    private string? description;
    private string? currentURL;
    private bool isLocation = false;
    private WeatherResponse.Current? current;
    private DateTime dateTime;

    private WeatherResponse.Forecast? forecast;
    private WeatherResponse.Alerts? alerts;
    private LocationModel locationModel = new();

    private string? savedLocation;
     protected override async Task OnInitializedAsync()
     {   
        var savedLocation = await JSRuntime.InvokeAsync<string>("GetCookie.getCookie", "Location");
        if (savedLocation != "") {
            isLocation = true;
            weatherResponse = await WeatherClient.getWeather("forecast",savedLocation, "3", null);
            response = weatherResponse;
            asignVariables(response);
        } 
    }
    
    private string? newLocation;
    private async Task selectLocation() {
 
        if (!string.IsNullOrWhiteSpace(newLocation)) {
            weatherResponse = await WeatherClient.getWeather("forecast",newLocation, "3",null);
            await JSRuntime.InvokeVoidAsync("SetCookie.setCookie", "Location=" + newLocation);
            newLocation = string.Empty;
            asignVariables(weatherResponse);
            isLocation=true;

        }
    }

    private void asignVariables(WeatherResponse response) {
        city = response?.location?.name;
        state = response?.location?.region;
        description = response?.current?.condition?.text?.ToLower();
        forecast = response?.forecast;
        currentURL = response?.current?.condition?.icon;
        alerts = response?.alerts;
        current = response?.current;
        dateTime = Convert.ToDateTime(response?.location?.localtime);    
    }

    private void changeLocation(){
        isLocation = false;
    }
}

