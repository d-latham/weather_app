@using WeatherApp.Models;
@using WeatherApp.Clients;
@using System.Web;
@using WeatherApp.Shared;

@inject WeatherClient WeatherClient;


@page "/"
<link href="Index.razor.css" rel="stylesheet" />
<PageTitle>Index</PageTitle>

<!-- Show initial popup to get location -->
@if (!@isLocation) {
    <div class="container border border-primary rounded">
        <h1>Weather Forecast</h1>
        <p>Enter Location</p>
        <input placeholder="City, State or Zip Code" @bind="newLocation"/>
        <button @onclick="selectLocation">Show me the weather!</button>

    </div>
}else {

<div class="row">
<div class="col">
<h1>@city, @state @dateTime.DayOfWeek</h1>
</div>
<div class="col col-xl">
    <button @onclick="changeLocation">change location</button>
</div>
</div>
<!-- Conditions -->

<div class="row">
    <div class="col">
        <p>The current conditions are @current.condition.text with a @forecast.forecastday[0].day.daily_chance_of_rain% chance of rain.
            Winds headed @current.wind_dir at @current.wind_mph mph with gusts up to @current.gust_mph mph.
        </p>
    </div>
    <div class="col">
        <img src=@current.condition.icon alt="Condition Icon" style="width:100px;height:100px;"/>
    </div>
</div>
<br/>
<!-- 3 day forecast hi/lo -->
@if (forecast != null) {
    <div class="row">
    @foreach (var forecastday in forecast.forecastday)
    {
        <div class="col">
            <p>@forecastday.date</p>
            <p>@forecastday.day.maxtemp_f f /@forecastday.day.mintemp_f f</p>
            <img src=@forecastday.day.condition.icon alt = "icon"/>
        </div>
        

    
    }
    </div>
}
<br/>
<!-- Alerts -->
@if (alerts != null) {
    @foreach (var alert in alerts.alert) {
        <br/>
        <p>@alert.headline --- @alert.areas</p>
        <p>@alert.effective.ToString("MM/dd/yyyy") - @alert.expires.ToString("MM/dd/yyyy")</p>
        <p>@alert.desc</p>
        <p>@alert.instruction</p>
    }
}
}
@*<h1>Local time: @response.location.localtime</h1>
<h1>current temp in C: @response.current.temp_c</h1>
@* causes nothing to show up - unable to figure out how to access lists *@
@* <h1>forecast: @forecastday[0]</h1>  *@
@*
<h1>Alerts: @weatherResponse.alerts.alert[0].instruction</h1>
*@

@code {
    private WeatherResponse? weatherResponse = null;
    

    // Variables for use on the page
    private WeatherResponse response = null;
    private string city;
    private string state;
    private string description;
    private string currentURL;
    private bool isLocation = false;
    private WeatherResponse.Current current;
    private DateTime dateTime;

    
    
    private WeatherResponse.Forecast forecast;
    private WeatherResponse.Alerts alerts;

     protected override async Task OnInitializedAsync()
     {
        //HttpCookie cookie = Request.Cookies("LocationCookie");
        weatherResponse = await WeatherClient.getWeather("forecast",null, null,null);
        response = weatherResponse;
        asignVariables(response);
        //location = weatherResponse.location.name + ", " + weatherResponse.location.region;
        //forecastday = weatherResponse.forecast.forecastday;
         
    }
    
    private string? newLocation;
    private async Task selectLocation() {
        if (!string.IsNullOrWhiteSpace(newLocation)) {
            weatherResponse = await WeatherClient.getWeather("forecast",newLocation, null,null);
            newLocation = string.Empty;
            asignVariables(weatherResponse);
            isLocation=true;
        }
    }

    private void asignVariables(WeatherResponse response) {
        city = response.location.name;
        state = response.location.region;
        description = response.current.condition.text.ToLower();
        forecast = response.forecast;
        currentURL = response.current.condition.icon;
        alerts = response.alerts;
        current = response.current;
        dateTime = Convert.ToDateTime(response.location.localtime);
    }
    private void changeLocation(){
        isLocation = false;
    }

    @* private void setCookie(String location) {
        private HttpCookie locationCookie = new HttpCookie("LocationCookie");
        locationCookie.Value = location;
        locationCookie.Expires = now.AddYears(1);
        Response.Cookies.Add(locationCookie);
    }  *@

}

