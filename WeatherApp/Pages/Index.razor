@using WeatherApp.Models;
@using WeatherApp.Clients;
@using System.Web;
@using WeatherApp.Shared;
@using System.Collections.Generic; 
@using WeatherApp.Pages;
@using Microsoft.AspNetCore.Components.Forms;


@inject WeatherClient WeatherClient;



@page "/"

<PageTitle>Index</PageTitle>
<style>
    body {
        
        @* background-image: linear-gradient(rgb(47, 79, 79), rgb(208, 208, 208)); *@
        background-image: linear-gradient(lightslategray, rgb(208, 208, 208));

    }
</style>

<!-- Show initial popup to get location -->
@if (!@isLocation) {
    <div class="index-weather">
    <EditForm Model="@locationModel" OnSubmit="@selectLocation"> 
        <h1 class="index-header">Weather Forecast</h1>
        <br/>
            <p style="text-align: center;">Enter Location</p>
        <div  class="text-center">
            <input class="location-input" @bind="newLocation"/>
        </div>
        <br/>
        <div class="col text-center" ><button type="button" class="btn btn-info">Show me the weather!</button></div>
    </EditForm>
    </div>
}else {
<div class="index-container">
<div class="row">
    <div class="col">
        <h1>@city, @state</h1>
    </div>
    @* <div class="col-12 justify-content-end d-flex">
            <button class="btn btn-outline-primary">.justify-content-end (on flex parent div)</button>
        </div> *@
    <div class="col">
        <button type="button" class="btn btn-info btn-sm float-right" @onclick="changeLocation">change location</button>
    </div>
</div>
<!-- Conditions -->

<div class="row">
    <div class="col float-right" style="align-items: right;">
        <p>The current conditions are @current.condition.text with a @forecast.forecastday[0].day.daily_chance_of_rain% chance of rain.
            Winds headed @current.wind_dir at @current.wind_mph mph with gusts up to @current.gust_mph mph.
        </p>
    </div>
</div>
<br/>
<!-- 3 day forecast hi/lo -->
@if (forecast != null) {
    <div class="row">
        @for(int i = 0; i < forecast.forecastday.Count; i++) {
            <div class="col">
                @if (i == 0) {
                    <h3 class="flex-container">Today</h3>
                } else {
                    <h3 class="flex-container">@dateTime.AddDays(i).DayOfWeek</h3> 
                }
                <br/>
                <div class="flex-container"><p>@forecast.forecastday[i].day.maxtemp_f<sup>o</sup>/@forecast.forecastday[i].day.mintemp_f<sup>o</sup></p></div>
                <div class="flex-container"><img src=@forecast.forecastday[i].day.condition.icon alt = "icon"/></div>
                @if (forecast.forecastday[i].day.daily_chance_of_rain > 0) {
                    <p class="flex-container">@forecast.forecastday[i].day.daily_chance_of_rain% chance of Rain</p>
                } else if (forecast.forecastday[i].day.daily_chance_of_snow > 0) {
                    <p class="flex-container">@forecast.forecastday[i].day.daily_chance_of_snow% chance of Snow</p>
                } else {
                    <p class="flex-container">0% chance of precipitation</p>
                }
            </div>
        }
    </div>
}
<br/>
<!-- Alerts -->

@if (alerts != null && alerts.alert.Count != 0) {
    <h2>Alerts in your area:</h2>
    @foreach (WeatherResponse.Alert alert in alerts.alert) {
        <br/>
        <div class="alert-container">
        <details style="cursor: pointer;">
            <summary style="list-style: none;font-family:Comic Sans MS; padding-right: 20px;">
                    <p>@alert.headline</p>
                    @if(alert.areas != "") {
                        <p>Effected Areas: @alert.areas<br/></p>
                    }
                    <p>Effective Dates: @alert.effective.ToString("MM/dd/yyyy") - @alert.expires.ToString("MM/dd/yyyy")</p>
            </summary>
                <p>@alert.desc</p>
                <p>@alert.instruction</p>
        </details></div>
        }
    }
</div>
}

@code {
    private WeatherResponse? weatherResponse = null;
    
    //private WeatherApp.Shared.CookieStorageAccessor cookie = new WeatherApp.Shared.CookieStorageAccessor();
    // Variables for use on the page
    private WeatherResponse response = null;
    private string city;
    private string state;
    private string description;
    private string currentURL;
    private bool isLocation = false;
    private WeatherResponse.Current current;
    private DateTime dateTime;

    private Dictionary<WeatherResponse.Alert, bool> alertDict = new Dictionary<WeatherResponse.Alert, bool>();
    private string done = "okay";
    private WeatherResponse.Forecast forecast;
    private WeatherResponse.Alerts alerts;
    private ExampleModel locationModel = new();


     protected override async Task OnInitializedAsync()
     {
        
        //CookieStorageAccessor cookie = new CookieStorageAccessor(new IJSRuntime());
        //cookie.SetValueAsync("location","Durango, Co");
        //HttpCookie cookie = Request.Cookies("LocationCookie");
        //var savedLocation = cookie.GetValueAsync("location");
        
        weatherResponse = await WeatherClient.getWeather("forecast",null, null, null);
        response = weatherResponse;
        asignVariables(response);
         
    }
    
    private string? newLocation;
    private async Task selectLocation() {
 
        if (!string.IsNullOrWhiteSpace(newLocation)) {
            weatherResponse = await WeatherClient.getWeather("forecast",newLocation, null,null);
            newLocation = string.Empty;
            asignVariables(weatherResponse);
            isLocation=true;
        }
    }

    private void asignVariables(WeatherResponse response) {
        alertDict.Clear();
        city = response.location.name;
        state = response.location.region;
        description = response.current.condition.text.ToLower();
        forecast = response.forecast;
        currentURL = response.current.condition.icon;
        alerts = response.alerts;
        current = response.current;
        dateTime = Convert.ToDateTime(response.location.localtime);
        foreach (WeatherResponse.Alert alert in alerts.alert) {
            alertDict.Add(alert, false);
        }

        
    }
    private void changeLocation(){
        isLocation = false;
    }
    private string addtoDict(WeatherResponse.Alert key, bool value) {
        alertDict.Add(key, value);
        return "okay";
    }
    private void showDetail(WeatherResponse.Alert alert) {
        alertDict[alert] = !alertDict[alert];
    }

    @* private string GetUserIP()
    {
                if (HttpContext.Current != null){
            var request = HttpContext.Current.Request;
        }   
        string ipList = request.ServerVariables["HTTP_X_FORWARDED_FOR"];

        if (!string.IsNullOrEmpty(ipList))
        {
            return ipList.Split(',')[0];
        }

        return Request.ServerVariables["REMOTE_ADDR"];
    } *@

    @* private void setCookie(String location) {
        private HttpCookie locationCookie = new HttpCookie("LocationCookie");
        locationCookie.Value = location;
        locationCookie.Expires = now.AddYears(1);
        Response.Cookies.Add(locationCookie);
    }  *@




}

